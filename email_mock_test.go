// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package email

import (
	"github.com/aws/aws-sdk-go/service/ses"
	"sync"
)

var (
	lockSenderMockSend sync.RWMutex
)

// Ensure, that SenderMock does implement Sender.
// If this is not the case, regenerate this file with moq.
var _ Sender = &SenderMock{}

// SenderMock is a mock implementation of Sender.
//
//     func TestSomethingThatUsesSender(t *testing.T) {
//
//         // make and configure a mocked Sender
//         mockedSender := &SenderMock{
//             SendFunc: func(in1 *Message) error {
// 	               panic("mock out the Send method")
//             },
//         }
//
//         // use mockedSender in code that requires Sender
//         // and then make assertions.
//
//     }
type SenderMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(in1 *Message) error

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// In1 is the in1 argument value.
			In1 *Message
		}
	}
}

// Send calls SendFunc.
func (mock *SenderMock) Send(in1 *Message) error {
	if mock.SendFunc == nil {
		panic("SenderMock.SendFunc: method is nil but Sender.Send was just called")
	}
	callInfo := struct {
		In1 *Message
	}{
		In1: in1,
	}
	lockSenderMockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	lockSenderMockSend.Unlock()
	return mock.SendFunc(in1)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedSender.SendCalls())
func (mock *SenderMock) SendCalls() []struct {
	In1 *Message
} {
	var calls []struct {
		In1 *Message
	}
	lockSenderMockSend.RLock()
	calls = mock.calls.Send
	lockSenderMockSend.RUnlock()
	return calls
}

var (
	lockSESApiMockSendEmail sync.RWMutex
)

// Ensure, that SESApiMock does implement SESApi.
// If this is not the case, regenerate this file with moq.
var _ SESApi = &SESApiMock{}

// SESApiMock is a mock implementation of SESApi.
//
//     func TestSomethingThatUsesSESApi(t *testing.T) {
//
//         // make and configure a mocked SESApi
//         mockedSESApi := &SESApiMock{
//             SendEmailFunc: func(in1 *ses.SendEmailInput) (*ses.SendEmailOutput, error) {
// 	               panic("mock out the SendEmail method")
//             },
//         }
//
//         // use mockedSESApi in code that requires SESApi
//         // and then make assertions.
//
//     }
type SESApiMock struct {
	// SendEmailFunc mocks the SendEmail method.
	SendEmailFunc func(in1 *ses.SendEmailInput) (*ses.SendEmailOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// SendEmail holds details about calls to the SendEmail method.
		SendEmail []struct {
			// In1 is the in1 argument value.
			In1 *ses.SendEmailInput
		}
	}
}

// SendEmail calls SendEmailFunc.
func (mock *SESApiMock) SendEmail(in1 *ses.SendEmailInput) (*ses.SendEmailOutput, error) {
	if mock.SendEmailFunc == nil {
		panic("SESApiMock.SendEmailFunc: method is nil but SESApi.SendEmail was just called")
	}
	callInfo := struct {
		In1 *ses.SendEmailInput
	}{
		In1: in1,
	}
	lockSESApiMockSendEmail.Lock()
	mock.calls.SendEmail = append(mock.calls.SendEmail, callInfo)
	lockSESApiMockSendEmail.Unlock()
	return mock.SendEmailFunc(in1)
}

// SendEmailCalls gets all the calls that were made to SendEmail.
// Check the length with:
//     len(mockedSESApi.SendEmailCalls())
func (mock *SESApiMock) SendEmailCalls() []struct {
	In1 *ses.SendEmailInput
} {
	var calls []struct {
		In1 *ses.SendEmailInput
	}
	lockSESApiMockSendEmail.RLock()
	calls = mock.calls.SendEmail
	lockSESApiMockSendEmail.RUnlock()
	return calls
}
